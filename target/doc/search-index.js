var searchIndex = JSON.parse('{\
"nb":{"doc":"Minimal and reusable non-blocking I/O layer","t":[4,13,6,13,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12],"n":["Error","Other","Result","WouldBlock","block","borrow","borrow_mut","clone","cmp","eq","fmt","from","from","from","hash","into","map","ne","partial_cmp","try_from","try_into","type_id","0"],"q":["nb","","","","","","","","","","","","","","","","","","","","","","nb::Error"],"d":["A non-blocking error","A different kind of error","A non-blocking result","This operation requires blocking behavior to complete","Turns the non-blocking expression <code>$e</code> into a blocking …","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Maps an <code>Error&lt;E&gt;</code> to <code>Error&lt;T&gt;</code> by applying a function to a …","","","","","",""],"i":[0,2,0,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,15],"f":[0,0,0,0,0,[[]],[[]],[[[2,[1]]],[[2,[1]]]],[[[2,[3]],2],4],[[[2,[5]],2],6],[[2,7],8],[9],[[]],[[],2],[[[2,[10]]]],[[]],[2,2],[[[2,[5]],2],6],[[[2,[11]],2],[[12,[4]]]],[[],13],[[],13],[[],14],0],"p":[[8,"Clone"],[4,"Error"],[8,"Ord"],[4,"Ordering"],[8,"PartialEq"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"never"],[8,"Hash"],[8,"PartialOrd"],[4,"Option"],[4,"Result"],[3,"TypeId"],[13,"Other"]]},\
"rfc1055":{"doc":"This crate provides a library for encoding and decoding …","t":[13,13,4,3,17,17,17,17,4,3,13,13,13,11,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BadEscape","BufferChanged","DecodeError","Decoder","END","ESC","ESC_END","ESC_ESC","EncodeError","Encoder","ReadError","WriteError","ZeroLengthBuffer","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","decode_from_buffer","encode_to_buffer","eq","eq","fmt","fmt","from","from","from","from","into","into","into","into","nb","new","new","read","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write"],"q":["rfc1055","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Indicates that <code>ESC</code> was read on the line, but followed by …","Indicates that the application changed what buffer was …","Errors that can occur in Decoder::read","An RFC1055 decoder. It contains the current state of the …","The <code>u8</code> value that signals the end of an RFC1055 frame.","The <code>u8</code> value that signals the start of an escape sequence.","<code>ESC</code> followed by <code>ESC_END</code> indicates a value of <code>END</code> was sent …","<code>ESC</code> followed by <code>ESC_ESC</code> indicates a value of <code>ESC</code> was sent …","Errors that occur in Encoder::write","An RFC1055 encoder. It contains the state of the encoder …","Indicates that the underlying reader function returned an …","Indicates that the underlying writer function returned an …","Indicates that the application passed a buffer with a …","","","","","","","","","Create a decoder that reads from a <code>u8</code> slice.","Create an encoder which writes to a mutable <code>u8</code> slice.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new decoder using the provided reader.","Create a new encoder using the provided writer.","Reads from the decoder into the given buffer. It mirrors …","","","","","","","","","","","","","Writes to the encoder from the given buffer. It mirrors …"],"i":[5,6,0,0,0,0,0,0,0,0,5,6,5,3,4,5,6,3,4,5,6,0,0,5,6,5,6,3,4,5,6,3,4,5,6,0,3,4,3,3,4,5,6,3,4,5,6,3,4,5,6,4],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,[[3,[2]]]],[[],[[4,[2]]]],[[5,5],1],[[6,6],1],[[5,7],8],[[6,7],8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[1,3],[[],4],[3,[[10,[9,5]]]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],12],[[],12],[[],12],[[],12],[4,[[10,[9,6]]]]],"p":[[15,"bool"],[8,"FnMut"],[3,"Decoder"],[3,"Encoder"],[4,"DecodeError"],[4,"EncodeError"],[3,"Formatter"],[6,"Result"],[15,"usize"],[6,"Result"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
